; vector math library

; ax, bx - *vec3, *vec3
; -> result
_vec_dot:
    push [ax+0]
    push [bx+0]
    fmul

    push [ax+4]
    push [bx+4]
    fmul

    push [ax+8]
    push [bx+8]
    fmul

    fadd
    fadd
ret

; ax - *vec3
_vec_normalize:
    push bx

    push ax
    pop  bx
    call _vec_dot

    fsqrt
    pop bx

    push [ax+0]
    push bx
    fdiv
    pop  [ax+0]

    push [ax+4]
    push bx
    fdiv
    pop  [ax+4]

    push [ax+8]
    push bx
    fdiv
    pop  [ax+8]

    pop bx
ret

; ax - *vec3
_vec_negate:
    push [ax+0]
    fneg
    pop  [ax+0]

    push [ax+4]
    fneg
    pop  [ax+4]

    push [ax+8]
    fneg
    pop  [ax+8]
ret

; ax: *vec3, bx: *vec3
_vec_sub_assign:
    push [ax+0]
    push [bx+0]
    fsub
    pop  [ax+0]

    push [ax+4]
    push [bx+4]
    fsub
    pop  [ax+4]

    push [ax+8]
    push [bx+8]
    fsub
    pop  [ax+8]
ret

; ax: *vec3, bx: *vec3
_vec_add_assign:
    push [ax+0]
    push [bx+0]
    fadd
    pop  [ax+0]

    push [ax+4]
    push [bx+4]
    fadd
    pop  [ax+4]

    push [ax+8]
    push [bx+8]
    fadd
    pop  [ax+8]
ret

; ax: *vec3, bx: float
_vec_mul_n_assign:
    push [ax+0]
    push bx
    fmul
    pop  [ax+0]

    push [ax+4]
    push bx
    fmul
    pop  [ax+4]

    push [ax+8]
    push bx
    fmul
    pop  [ax+8]
ret

; ax - dst, bx - src
_vec_copy:
    push [bx+0]
    pop  [ax+0]

    push [bx+4]
    pop  [ax+4]

    push [bx+8]
    pop  [ax+8]
ret

; ax - src
_vec_push:
    push [ax+0]
    push [ax+4]
    push [ax+8]
    push ax
ret

_vec_pop:
    pop ax
    pop [ax+8]
    pop [ax+4]
    pop [ax+0]
ret

; ax - dst; bx, cx - src
_vec_cross:
    push [bx+4]
    push [cx+8]
    fmul
    push [bx+8]
    push [cx+4]
    fmul
    fsub
    pop  [ax+0]

    push [bx+8]
    push [cx+0]
    fmul
    push [bx+0]
    push [cx+8]
    fmul
    fsub
    pop  [ax+4]

    push [bx+0]
    push [cx+4]
    fmul
    push [bx+4]
    push [cx+0]
    fmul
    fsub
    pop  [ax+8]
ret
