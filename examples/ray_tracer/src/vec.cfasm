; Vector math module

; ax, bx - *vec3, *vec3
; result on stack
_vec_dot:
    push [ax+0]
    push [bx+0]
    fmul

    push [ax+4]
    push [bx+4]
    fmul

    push [ax+8]
    push [bx+8]
    fmul

    fadd
    fadd
ret ; _vec_dot

; ax - *vec3
_vec_normalize:
    push bx

    push ax
    pop  bx
    call _vec_dot

    fsqrt
    pop bx

    push [ax+0]
    push bx
    fdiv
    pop  [ax+0]

    push [ax+4]
    push bx
    fdiv
    pop  [ax+4]

    push [ax+8]
    push bx
    fdiv
    pop  [ax+8]

    pop bx
ret ; _vec_normalize

; ax - *vec3
_vec_negate:
    push [ax+0]
    fneg
    pop  [ax+0]

    push [ax+4]
    fneg
    pop  [ax+4]

    push [ax+8]
    fneg
    pop  [ax+8]
ret ; _vec_negate

; ax - dst, bx - src
_vec_copy:
    push [bx+0]
    pop  [ax+0]

    push [bx+4]
    pop  [ax+4]

    push [bx+8]
    pop  [ax+8]
ret

; ax - dst; bx, cx - src
_vec_cross:
    push [bx+4]
    push [cx+8]
    fmul
    push [bx+8]
    push [cx+4]
    fmul
    fsub
    pop  [ax+0]

    push [bx+8]
    push [cx+0]
    fmul
    push [bx+0]
    push [cx+8]
    fmul
    fsub
    pop  [ax+4]

    push [bx+0]
    push [cx+4]
    fmul
    push [bx+4]
    push [cx+0]
    fmul
    fsub
    pop  [ax+8]
ret

; normalized vec to color transformation function
; ax - *vec3
; result on stack
_vec_to_color:
    push [ax+0]
    push 1.0
    fadd
    push 0.5
    fmul
    push 255.0
    fmul
    ftoi

    push [ax+4]
    push 1.0
    fadd
    push 0.5
    fmul
    push 255.0
    fmul
    ftoi

    push 8
    shl

    push [ax+8]
    push 1.0
    fadd
    push 0.5
    fmul
    push 255.0
    fmul
    ftoi

    push 16
    shl

    or
    or
ret ; _vec_to_color

; vec.cfasm
