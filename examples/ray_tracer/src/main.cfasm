; Ray tracer program

; LAYOUTS
; vec:
;     00..04 (f32) x
;     04..08 (f32) y
;     08..12 (f32) z
; camera:
;     00..12 (vec) location
;     12..24 (vec) direction
;     24..36 (vec) right
;     36..48 (vec) up
;     48..60 (vec) pixel_dir
; sphere:
;     00..12 (vec) center
;     12..16 (f32) radius

; GLOBAL VARIABLE SPANS
; camera   : (camera) 256000+00..60
; sphere 0 : (sphere) 256000+60..76
; sphere 1 : (sphere) 256000+76..92

call _start
halt

; args: y x color
; uses ax
_set_pixel:
    push 320
    mul
    add
    push 4
    mul
    pop ax
    pop [ax]
ret ; _set_pixel

; ax - count
; (distance, color) pairs on stack
; uses bx, cx, dx, ex
; dx - best_distance
; ex - best_color
_find_best_distance:
    ; initialize best distance and color
    push 150000000.0
    pop dx ; best_distance
    push 0
    pop ex ; best_color

    _find_best_distance__loop:
        pop bx ; curr_distance
        pop cx ; curr_color

        ; check for negative distance
        ; push bx
        ; push 0.0
        ; fcmp
        ; jle _find_best_distance__continue

        push dx
        push bx
        fcmp
        jle _find_best_distance__continue

        ; (best_distance, best_color) = (curr_distance, curr_color)
        push bx
        pop  dx
        push cx
        pop  ex

        _find_best_distance__continue:
        ; ax -= 1
        push ax
        push 1
        sub
        pop ax

        push ax
        push 0
        cmp
        jg _find_best_distance__loop
    _find_best_distance__end:
ret ; _find_best_distance

_start:
    ; set video mode
    ; 1011 - manual update, true color
    push 0xB
    vsm

    ; setup sphere 0
    push 2.0
    pop [256060]
    push 0.0
    pop [256064]
    push 0.0
    pop [256068]
    push 2.0
    pop [256072]

    ; setup sphere 1
    push 2.0
    fneg
    pop  [256076]
    push 0.0
    pop  [256080]
    push 0.0
    pop  [256084]
    push 1.0
    pop  [256088]

    _start__main_loop:
        ; new frame loop

        ; update camera
        call _camera_update

        ; initialize Y counter
        push 0
        pop cx

        _start__yloop:

            ; initialize X counter
            push 0
            pop bx

            _start__xloop:
                 ; calculate vector pointing to (bx, cx) pixel
                 call _camera_calculate_pixel_vector

                 push bx
                 push cx

                 ; calculate environment color
                 push 256048
                 pop ax
                 call _vec_to_color
                 ; set env distance (env 'infinity' should be less that geometry 'infinity' for proper geometry display.)
                 push 149000000.0

                 ; calculate first sphere intersection
                 push 0xFFFFFF
                 push 256060
                 pop ax
                 call _camera_check_sphere_intersection
                 push ax

                 ; calculate second sphere intersection
                 push 0x000000
                 push 256076
                 pop ax
                 call _camera_check_sphere_intersection
                 push ax

                 ; set object count to 3
                 push 3
                 pop ax

                 ; find best distance
                 call _find_best_distance

                 pop cx
                 pop bx

                 ; pop color of intersection with least distance to camera (see '_find_best_distance' header)
                 push ex

                 ; set pixel on X, Y
                 push bx
                 push cx
                 call _set_pixel

                 ; increment and check
                 push bx
                 push 1
                 add
                 pop bx

                 push bx
                 push 320
                 cmp
                 jne _start__xloop
            ; increment and check
            push cx
            push 1
            add
            pop cx

            push cx
            push 200
            cmp
            jne _start__yloop

        ; request screen refresh
        vrs
        jmp _start__main_loop
ret ; _start

; main.cfasm
